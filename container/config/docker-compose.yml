version: "3.8"
 
# 数据卷编号规则：c(容器)1（容器编号)p(项目)1(项目编号_mysql(容器类型)_1(容器类型组编号)_master(主从)_vol(卷名) 
volumes: # 自定义数据卷  
  v1p1_redis_1_master_vol: 
  v2p1_redis_1_slave_vol:
  v3p1_mysql_1_master_vol: 
  v4p1_mysql_1_slave_vol:  
  p1_media_vol: 
  p1_static_vol: 
  tracker_vol: 
  storage_vol: 
 
# 网络编号规则：n(容器)1（网络编号)p(项目)1(项目编号_mysql(容器类型)_1(容器类型组编号)_network(卷名) 
networks: # 自定义网络(默认桥接), 不使用links通信
  n1p1_redis_1_network: 
    driver: bridge
  n2p1_mysql_1_network:
    driver: bridge
  elasticsearch_network:
    driver: bridge
  fastdfs_network:
    driver: bridge
  nginx_network:
    driver: bridge

# 服务编号规则：s(服务)1（服务编号)p(项目)1(项目编号_mysql(容器类型)_1(容器类型组编号)_master(主从)  
services:
  s1p1_redis_1_master:
    image: redis:6.2.5
    # 容器规则：c(容器)1（容器编号)p(项目)1(项目编号_mysql(容器类型)_1(容器类型组编号)_master(主从) 
    container_name: c1p1_redis_1_master
    command: redis-server /etc/redis/redis.conf # 容器启动后启动redis服务器
    networks:
      - n1p1_redis_1_network
    volumes:
      - v1p1_redis_1_master_vol:/data # 通过挂载给redis数据备份
      - ./redis/b1p1_redis_1_master/redis.conf:/etc/redis/redis.conf # 挂载redis配置文件（这是绑定，不同于上面的具名挂载，因此，命名也不同，绑定挂载将具名挂载的v换成b,其他方法不变，结尾去除_vol）
    ports:
      - "6379:6379"
    #restart: always # always表容器运行发生错误时一直重启
 
  s2p1_redis_1_slave:
    image: redis:6.2.5
    container_name: c2p1_redis_1_slave
    command: redis-server /etc/redis/redis.conf # 容器启动后启动redis服务器
    networks:
      - redis_1_network
    volumes:
      - redis_1_slave_vol:/data # 通过挂载给redis数据备份
      - ./redis/b2p1_redis_1_slave/redis.conf:/etc/redis/redis.conf # 挂载redis配置文件
    ports:
      - "6380:6379"
    #restart: always # always表容器运行发生错误时一直重启
  
  s3p1_mysql_1_master:
    image: mysql:8.0.28
    container_name: c3p1_mysql_1_master
    env_file:  
      - ./mysql/b3p1_mysql_1_master/.env # 使用了环境变量文件
    networks:  
      - n2p1_mysql_1_network
    volumes:
      - v3p1_mysql_1_master_vol:/var/lib/mysql:rw # 挂载数据库数据, 可读可写
      - ./mysql/b3p1_mysql_1_master/conf/my.cnf_master:/etc/mysql/my.cnf # 挂载配置文件
      - ./mysql/b3p1_mysql_1_master/init/:/docker-entrypoint-initdb.d/ # 挂载数据初始化sql脚本
    ports:
      - "3306:3306" # 与配置文件保持一致
    #restart: always
 
  s4p1_mysql_1_slave:
    image: mysql:8.0.28
    container_name: c4p1_mysql_1_slave
    env_file:  
      - ./mysql/b4p1_mysql_1_slave/.env # 使用了环境变量文件
    networks:  
      - n2p1_mysql_1_network
    volumes:
      - v4p1_mysql_1_slave_vol:/var/lib/mysql:rw # 挂载数据库数据, 可读可写
      - ./mysql/b4p1_mysql_1_slave/conf/my.cnf_master:/etc/mysql/my.cnf # 挂载配置文件
      - ./mysql/b4p1_mysql_1_slave/init/:/docker-entrypoint-initdb.d/ # 挂载数据初始化sql脚本
    ports:
      - "3307:3306" # 与配置文件保持一致
    #restart: always


  tracker:
    image: delron/fastdfs
    #restart: always
    container_name: container_tracker
    volumes:
      - tracker_vol:/var/fdfs
    command: "tracker"
    networks:
      - fastdfs_network
    ports:
      - "22122:22122"
  storage:
    image: delron/fastdfs
    #restart: always
    container_name: container_storage
    volumes:
      - storage_vol:/var/fdfs
      - ./fastdfs/conf/storage.conf:/etc/fdfs/storage.conf # 挂载storage配置文件
    command: "storage"
    networks:
      - fastdfs_network
    ports:
      - "23000:23000"
      - "8888:8888"      #访问fastdfs的图片时，由于服务里用到nginx反向代理，所以，要映射出去
  
  elasticsearch:
    image: "delron/elasticsearch-ik:2.4.6-1.0"

    container_name: container_elasticsearch
    #restart: always
    volumes:
      - ./elasticsearch-2.4.6/data:/usr/share/elasticsearch/data
      - ./elasticsearch-2.4.6/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    networks:
      - elasticsearch_network
    ports:
      - "9200:9200"
      - "9300:9300"
      
  web:
    build: ./web
    container_name: container_web
    expose:
      - "8000"
    volumes:
      - ./web/meiduo_mall:/var/www/html/meiduo_mall # 挂载项目代码
      - static_vol:/var/www/html/meiduo_mall/static # 以数据卷挂载容器内static文件
      - media_vol:/var/www/html/meiduo_mall/media # 以数据卷挂载容器内用户上传媒体文件
      - ./web/log/meiduo_mall-uwsgi.log:/tmp/meiduo_mall-uwsgi.log # 挂载uwsgi日志
    networks:
      - nginx_network
      - db_network  
      - redis_network
      - elasticsearch_network
      - fastdfs_network
    depends_on:
      - db_master
      - db_slave
      - redis
      - tracker
      - storage
      - elasticsearch
    #restart: always
    tty: true
    stdin_open: true
 
 
  nginx:
    build: ./nginx
    container_name: container_nginx
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "80"
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/conf.d/nginx.conf # 挂载nginx配置文件
     #- ./nginx/ssl:/usr/share/nginx/ssl # 挂载ssl证书目录
      - ./nginx/log:/var/log/nginx # 挂载日志
      - static_vol:/usr/share/nginx/html/static # 挂载静态文件
      - media_vol:/usr/share/nginx/html/media # 挂载用户上传媒体文件
    networks:
      - nginx_network
    depends_on:
      - web
    #restart: always




