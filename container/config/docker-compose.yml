version: "3.8"
 
 
volumes: # 自定义数据卷
  p1_v_mysql_master_1: 
  p1_v_mysql_slave_1: 
  p1_v_redis_master_1: 
  p1_v_redis_slave_1:
  media_vol: 
  static_vol: 
  tracker_vol: 
  storage_vol: 
  
 
networks: # 自定义网络(默认桥接), 不使用links通信
  p1_n_nnginx_master_1:
    driver: bridge
  p1_n_mysql_master_1:
    driver: bridge
  p1_n_redis_master_1: 
    driver: bridge
  elasticsearch_network:
    driver: bridge
  fastdfs_network:
    driver: bridge

services:
  p1_s_redis_master_1:
    image: redis:6.2.5
    container_name: container_p1_s_redis_master
    command: redis-server /etc/redis/redis.conf # 容器启动后启动redis服务器
    networks:
      - p1_n_redis_master_1
    volumes:
      - p1_v_redis_master_1:/data # 通过挂载给redis数据备份
      - ./redis/p1_b_redis_master_1/redis.conf:/etc/redis/redis.conf # 挂载redis配置文件
    ports:
      - "6379:6379"
    #restart: always # always表容器运行发生错误时一直重启
 
  p1_s_redis_slave_1:
    image: redis:6.2.5
    container_name: container_p1_s_redis_slave_1
    command: redis-server /etc/redis/redis.conf # 容器启动后启动redis服务器
    networks:
      - p1_n_redis_master_1
    volumes:
      - p1_v_redis_slave_1:/data # 通过挂载给redis数据备份
      - ./redis/p1_b_redis_slave_1/redis.conf:/etc/redis/redis.conf # 挂载redis配置文件
    ports:
      - "6380:6379"
    #restart: always # always表容器运行发生错误时一直重启

  p1_s_mysql_master_1:
    image: mysql:8.0.28
    container_name: container_p1_s_mysql_master_1
    env_file:  
      - ./mysql/p1_b_mysql_master_1/env/.env # 使用了环境变量文件
    networks:  
      - p1_n_mysql_master_1
    volumes:
      - p1_v_mysql_master_1:/var/lib/mysql:rw # 挂载数据库数据, 可读可写
      - ./mysql/p1_b_mysql_master_1/conf/my.cnf:/etc/mysql/my.cnf # 挂载配置文件
      - ./mysql/p1_mysql_master_1/init/:/docker-entrypoint-initdb.d/ # 挂载数据初始化sql脚本
    ports:
      - "3306:3306" # 与配置文件保持一致
    #restart: always
 
  p1_s_mysql_slave_1:
    image: mysql:8.0.28
    container_name: contanier_p1_s_mysql_slave_1
    env_file:  
      - ./mysql/p1_b_mysql_slave_1/env/.env # 使用了环境变量文件
    networks:  
      - p1_n_mysql_master_1
    volumes:
      - p1_v_mysql_slave_1:/var/lib/mysql:rw # 挂载数据库数据, 可读可写
      - ./mysql/p1_b_mysql_slave_1/conf/my.cnf:/etc/mysql/my.cnf # 挂载配置文件
      - ./mysql/p1_b_mysql_slave_1/init:/docker-entrypoint-initdb.d/ # 挂载数据初始化sql脚本
    ports:
      - "3307:3306" # 与配置文件保持一致
    #restart: always


  tracker:
    image: delron/fastdfs
    #restart: always
    container_name: container_tracker
    volumes:
      - tracker_vol:/var/fdfs
    command: "tracker"
    networks:
      - fastdfs_network
    ports:
      - "22122:22122"
  storage:
    image: delron/fastdfs
    #restart: always
    container_name: container_storage
    volumes:
      - storage_vol:/var/fdfs
      - ./fastdfs/conf/storage.conf:/etc/fdfs/storage.conf # 挂载storage配置文件
    command: "storage"
    networks:
      - fastdfs_network
    ports:
      - "23000:23000"
      - "8888:8888"      #访问fastdfs的图片时，由于服务里用到nginx反向代理，所以，要映射出去
  
  elasticsearch:
    image: "delron/elasticsearch-ik:2.4.6-1.0"

    container_name: container_elasticsearch
    #restart: always
    volumes:
      - ./elasticsearch-2.4.6/data:/usr/share/elasticsearch/data
      - ./elasticsearch-2.4.6/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    networks:
      - elasticsearch_network
    ports:
      - "9200:9200"
      - "9300:9300"      
 
 
  # nginx:
  #   build: ./nginx
  #   container_name: container_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   expose:
  #     - "80"
  #   volumes:
  #     - ./nginx/conf/nginx.conf:/etc/nginx/conf.d/nginx.conf # 挂载nginx配置文件
  #    #- ./nginx/ssl:/usr/share/nginx/ssl # 挂载ssl证书目录
  #     - ./nginx/log:/var/log/nginx # 挂载日志
  #     - static_vol:/usr/share/nginx/html/static # 挂载静态文件
  #     - media_vol:/usr/share/nginx/html/media # 挂载用户上传媒体文件
  #   networks:
  #     - nginx_network
  #   #restart: always




